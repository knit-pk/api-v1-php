#!/usr/bin/env php
<?php

/**
 * This files is used mainly for Dockerfile build time
 * to provide a way running symfony console, as some services
 * like Doctrine are unavailable
 */

use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\Config\Loader\LoaderInterface;
use Symfony\Component\HttpKernel\Kernel as BaseKernel;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Routing\RouteCollectionBuilder;

set_time_limit(0);

require __DIR__.'/../vendor/autoload.php';

if (!class_exists(Application::class)) {
    throw new \RuntimeException('You need to add "symfony/framework-bundle" as a Composer dependency.');
}

$input = new ArgvInput();
$env = 'docker';
$debug = true;

if ($debug) {
    umask(0000);

    if (class_exists(Debug::class)) {
        Debug::enable();
    }
}

$kernel = new class ($env, $debug) extends BaseKernel {
    use MicroKernelTrait;

    private const CONFIG_EXTS = '.{php,xml,yaml,yml}';

    private const REGISTERED_BUNDLES = [
        Symfony\Bundle\FrameworkBundle\FrameworkBundle::class,
        ApiPlatform\Core\Bridge\Symfony\Bundle\ApiPlatformBundle::class,
        Symfony\Bundle\TwigBundle\TwigBundle::class,
        EasyCorp\Bundle\EasyAdminBundle\EasyAdminBundle::class,
    ];

    public function getCacheDir(): string
    {
        return \dirname(__DIR__).'/var/cache/'.$this->environment;
    }

    public function getLogDir(): string
    {
        return\dirname(__DIR__).'/var/log';
    }

    /**
     * @inheritdoc
     */
    public function registerBundles(): Generator
    {
        foreach (self::REGISTERED_BUNDLES as $bundle) {
            yield new $bundle();
        }
    }

    /**
     * {@inheritdoc}
     *
     * @throws \Symfony\Component\Config\Exception\FileLoaderLoadException
     */
    protected function configureRoutes(RouteCollectionBuilder $routes): void
    {
    }

    /**
     * {@inheritdoc}
     *
     * @throws \Exception
     */
    protected function configureContainer(\Symfony\Component\DependencyInjection\ContainerBuilder $c, LoaderInterface $loader): void
    {
        $confDir = \dirname(__DIR__).'/config';
        if (\is_dir($confDir.'/packages/'.$this->environment)) {
            $loader->load($confDir.'/packages/'.$this->environment.'/**/*'.self::CONFIG_EXTS, 'glob');
        }
        $loader->load($confDir.'/services_'.$this->environment.self::CONFIG_EXTS, 'glob');
    }
};

$application = new Application($kernel);
$application->run($input);
