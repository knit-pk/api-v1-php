# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    title: 'KNIT RESTful API'
    description: 'KNIT RESTful API build using ApiPlatform'
    resources.base_url: '%env(APP_RESOURCES_BASE_URL)%'
    resources.default_prefix: '%env(APP_RESOURCES_DEFAULT_PREFIX)%'
    router.request_context.host: '%env(APP_REQUEST_CONTEXT_HOST)%'
    router.request_context.scheme: '%env(APP_REQUEST_CONTEXT_SCHEME)%'
    router.request_context.base_url: '%env(APP_REQUEST_CONTEXT_BASE_URL)%'
    session.storage.options:
        cache_limiter: 0

    # Default environment variables values
    env(HOST): 'localhost'
    env(JWT_PRIVATE_KEY_PATH): config/jwt/private.pem
    env(JWT_PUBLIC_KEY_PATH): config/jwt/public.pem
    env(APP_RESOURCES_BASE_URL): ''
    env(APP_RESOURCES_DEFAULT_PREFIX): 'media/upload'
    env(APP_REQUEST_CONTEXT_HOST): localhost
    env(APP_REQUEST_CONTEXT_SCHEME): http
    env(APP_REQUEST_CONTEXT_BASE_URL): /

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../src/{Entity,Migrations,Repository,Swagger,Bundle}'

    # Register entity processor handlers
    App\Command\Entity\:
        resource: '../src/Command/Entity/*'
        public: true

    # actions are imported separately to make sure they
    # have the tag that allows to type-hint services
    App\Action\:
        resource: '../src/Action'
        tags: ['controller.service_arguments']

    ### Gedmo doctrine extensions
    gedmo.listener.sluggable:
        class: Gedmo\Sluggable\SluggableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, ['@annotation_reader']]

    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, ['@annotation_reader']]

    ### Add custom payload to JWT Access Token
    app.event.jwt_created_listener:
        class: App\EventListener\JWTCreatedListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    ### Add custom payload to JWT Access Token
    app.event.image_uploaded_listener:
        class: App\EventListener\ImageUploadedListener
        tags:
            - { name: kernel.event_listener, event: vich_uploader.post_upload, method: onVichUploaderPostUpload }

    ### Add parent item to api sub resource
    app.event.parent_read_listener:
        class: App\EventListener\ParentReadListener
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 4 }

    ### Dynamically inject serialization groups for admins
    'App\Serializer\AdminContextBuilder':
        decorates: 'api_platform.serializer.context_builder'
        arguments: [ '@App\Serializer\AdminContextBuilder.inner' ]
        autoconfigure: false

    'App\Metadata\Property\Factory\AdminPropertyMetadataFactory':
        decorates: 'api_platform.metadata.property.metadata_factory'
        decoration_priority: -20
        arguments: [ '@App\Metadata\Property\Factory\AdminPropertyMetadataFactory.inner' ]
        autoconfigure: false

    'App\Metadata\Resource\Factory\AdminResourceMetadataFactory':
        decorates: 'api_platform.metadata.resource.metadata_factory'
        decoration_priority: -20
        arguments: [ '@App\Metadata\Resource\Factory\AdminResourceMetadataFactory.inner' ]
        autoconfigure: false

    'App\Swagger\SwaggerDocumentation':
        decorates: 'api_platform.swagger.normalizer.documentation'
        arguments: [ '@App\Swagger\SwaggerDocumentation.inner' ]
        autoconfigure: false

    'Vich\UploaderBundle\Storage\StorageInterface':
        alias: vich_uploader.storage.file_system

    'App\UrlGenerator\UrlGeneratorInterface':
        class: App\UrlGenerator\RequestContextUrlGenerator

    'App\UrlGenerator\RequestStackUrlGenerator':
        decorates: App\UrlGenerator\UrlGeneratorInterface
        decoration_priority: -10
        arguments: [ '@App\UrlGenerator\RequestStackUrlGenerator.inner' ]

    'App\UrlGenerator\ConfigurationUrlGenerator':
        decorates: App\UrlGenerator\UrlGeneratorInterface
        decoration_priority: -20
        arguments: [ '@App\UrlGenerator\ConfigurationUrlGenerator.inner', '%resources.base_url%']

    'App\EntityProcessor\Handler\Factory\EntityProcessorHandlerFactoryInterface':
        class: App\EntityProcessor\Handler\Factory\ClassNameEntityProcessorHandlerFactory

    'App\EntityProcessor\Handler\Factory\ConsoleCommandEntityProcessorHandlerFactory':
        decorates: App\EntityProcessor\Handler\Factory\EntityProcessorHandlerFactoryInterface
        decoration_priority: -10
        arguments: [ '@App\EntityProcessor\Handler\Factory\ConsoleCommandEntityProcessorHandlerFactory.inner' ]
